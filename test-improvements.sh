#!/bin/bash

# Colores
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üß™ PROBANDO MEJORAS DE LA ARQUITECTURA${NC}"
echo ""

# Funci√≥n para mostrar respuesta JSON de forma bonita
show_response() {
    local response="$1"
    local description="$2"
    
    echo -e "${YELLOW}üìã $description${NC}"
    echo "$response" | jq . 2>/dev/null || echo "$response"
    echo ""
}

# 1. Probar creaci√≥n de usuario v√°lido
echo -e "${GREEN}‚úÖ 1. Creando usuario v√°lido...${NC}"
response=$(curl -s -X POST http://localhost:8081/api/usuarios \
    -H "Content-Type: application/json" \
    -d '{"nombre":"Ana Garc√≠a","email":"ana@test.com","telefono":"555-1234"}')
show_response "$response" "Usuario creado correctamente"

# 2. Probar error de email duplicado (deber√≠a devolver error estructurado)
echo -e "${RED}‚ùå 2. Intentando crear usuario con email duplicado...${NC}"
response=$(curl -s -X POST http://localhost:8081/api/usuarios \
    -H "Content-Type: application/json" \
    -d '{"nombre":"Ana Duplicate","email":"ana@test.com","telefono":"555-9999"}')
show_response "$response" "Error de email duplicado (respuesta estructurada)"

# 3. Probar validaci√≥n de datos inv√°lidos
echo -e "${RED}‚ùå 3. Intentando crear usuario con datos inv√°lidos...${NC}"
response=$(curl -s -X POST http://localhost:8081/api/usuarios \
    -H "Content-Type: application/json" \
    -d '{"nombre":"","email":"email-invalido","telefono":"555-1111"}')
show_response "$response" "Error de validaci√≥n (email inv√°lido y nombre vac√≠o)"

# 4. Probar b√∫squeda de usuario inexistente
echo -e "${RED}‚ùå 4. Buscando usuario inexistente...${NC}"
response=$(curl -s -X GET http://localhost:8081/api/usuarios/999)
show_response "$response" "Error de usuario no encontrado (ID: 999)"

# 5. Probar b√∫squeda con ID inv√°lido
echo -e "${RED}‚ùå 5. Buscando con ID inv√°lido...${NC}"
response=$(curl -s -X GET http://localhost:8081/api/usuarios/-1)
show_response "$response" "Error de ID inv√°lido"

# 6. Probar actualizaci√≥n exitosa
echo -e "${GREEN}‚úÖ 6. Actualizando usuario existente...${NC}"
response=$(curl -s -X PUT http://localhost:8081/api/usuarios/1 \
    -H "Content-Type: application/json" \
    -d '{"nombre":"Ana Garc√≠a Actualizada","email":"ana.updated@test.com","telefono":"555-5678"}')
show_response "$response" "Usuario actualizado correctamente"

# 7. Probar todas las validaciones del service
echo -e "${GREEN}‚úÖ 7. Obteniendo todos los usuarios...${NC}"
response=$(curl -s -X GET http://localhost:8081/api/usuarios)
show_response "$response" "Lista de usuarios con las mejoras aplicadas"

# 8. Probar b√∫squeda por email
echo -e "${GREEN}‚úÖ 8. Buscando por email...${NC}"
response=$(curl -s -X GET http://localhost:8081/api/usuarios/email/ana.updated@test.com)
show_response "$response" "B√∫squeda por email (normalizaci√≥n aplicada)"

echo -e "${BLUE}üéâ PRUEBAS COMPLETADAS${NC}"
echo ""
echo -e "${YELLOW}üîç MEJORAS IMPLEMENTADAS:${NC}"
echo -e "  ‚úÖ Capa de servicio con l√≥gica de negocio"
echo -e "  ‚úÖ Excepciones personalizadas y estructuradas"
echo -e "  ‚úÖ Manejo global de errores con JSON"
echo -e "  ‚úÖ Validaciones mejoradas y normalizaciones"
echo -e "  ‚úÖ Separaci√≥n clara de responsabilidades"
echo -e "  ‚úÖ Transacciones y mejores pr√°cticas"
echo ""